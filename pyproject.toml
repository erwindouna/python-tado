[tool.poetry]
name = "tadoasync"
version = "0.2.1"
authors = ["Erwin Douna <e.douna@gmail.com>"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
description = "Asynchronous Python client for controlling Tado devices."
documentation = "https://github.com/erwindouna/python-tado"
homepage = "https://github.com/erwindouna/python-tado"
keywords = ["tado", "homeassistant", "api", "async", "client"]
license = "MIT"
maintainers = ["Erwin Douna <e.douna@gmail.com>"]
packages = [{ include = "tadoasync", from = "src" }]
readme = "README.md"
repository = "https://github.com/erwindouna/python-tado"

[tool.poetry.dependencies]
aiohttp = ">=3.0.0"
mashumaro = ">=3.10"
orjson = ">=3.9.8"
python = "^3.12"
yarl = ">=1.6.0"
aioresponses = "^0.7.7"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/erwindouna/python-tado/issues"
Changelog = "https://github.com/erwindouna/python-tado/releases"

[tool.poetry.group.dev.dependencies]
aresponses = "3.0.0"
codespell = "2.2.6"
covdefaults = "2.3.0"
coverage = { version = "7.4.3", extras = ["toml"] }
mypy = "1.9.0"
pre-commit = "3.6.0"
pre-commit-hooks = "4.5.0"
pylint = "3.0.3"
pytest = "8.1.1"
pytest-asyncio = "^0.23.5.post1"
pytest-cov = "4.1.0"
ruff = "0.1.13"
safety = "3.0.1"
yamllint = "1.33.0"
syrupy = "4.6.1"
deptry = "^0.19.1"

[tool.coverage.run]
source = ["tado"]
omit = [
  "tests/*",
  "*/.venv/*",
  "*/venv/*",
  "*/site-packages/*",
]

[tool.coverage.report]
show_missing = true
fail_under = 95
exclude_lines = [
  "pragma: no cover",
  "if __name__ == \"__main__\":",
]

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = "3.12"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.MASTER]
ignore = ["tests"]

[tool.pylint.BASIC]
good-names = ["_", "ex", "fp", "i", "id", "j", "k", "on", "Run", "T"]

[tool.pylint.DESIGN]
max-attributes = 8

[tool.pylint."MESSAGES CONTROL"]
disable = ["duplicate-code", "format", "unsubscriptable-object", "no-member", "too-many-arguments", "protected-access", "invalid-name", "wrong-import-order", "too-many-statements", "too-many-public-methods", "too-many-instance-attributes", "redefined-builtin"]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pytest.ini_options]
addopts = [
  "--cov=tado",
  "--cov-report=term-missing",
  "--cov-report=xml",
  "--cov-fail-under=95",
]
